{"version":3,"file":"nivo-line.es.js","sources":["../src/PointTooltip.js","../src/SliceTooltip.js","../src/props.js","../src/hooks.js","../src/Areas.js","../src/LinesItem.js","../src/Lines.js","../src/SlicesItem.js","../src/Slices.js","../src/Points.js","../src/Mesh.js","../src/Line.js","../src/ResponsiveLine.js","../src/LineCanvas.js","../src/ResponsiveLineCanvas.js"],"sourcesContent":["/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nconst LinePointTooltip = ({ point }) => {\n    return (\n        <BasicTooltip\n            id={\n                <span>\n                    x: <strong>{point.data.xFormatted}</strong>, y:{' '}\n                    <strong>{point.data.yFormatted}</strong>\n                </span>\n            }\n            enableChip={true}\n            color={point.serieColor}\n        />\n    )\n}\n\nLinePointTooltip.propTypes = {\n    point: PropTypes.object.isRequired,\n}\n\nexport default memo(LinePointTooltip)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTheme } from '@nivo/core'\nimport { Chip, TableTooltip } from '@nivo/tooltip'\n\nconst SliceTooltip = ({ slice, axis }) => {\n    const theme = useTheme()\n    const otherAxis = axis === 'x' ? 'y' : 'x'\n\n    return (\n        <TableTooltip\n            rows={slice.points.map(point => [\n                <Chip key=\"chip\" color={point.serieColor} style={theme.tooltip.chip} />,\n                point.serieId,\n                <span key=\"value\" style={theme.tooltip.tableCellValue}>\n                    {point.data[`${otherAxis}Formatted`]}\n                </span>,\n            ])}\n        />\n    )\n}\n\nSliceTooltip.propTypes = {\n    slice: PropTypes.object.isRequired,\n    axis: PropTypes.oneOf(['x', 'y']).isRequired,\n}\n\nexport default memo(SliceTooltip)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport PropTypes from 'prop-types'\nimport { lineCurvePropType, blendModePropType, motionPropTypes, defsPropTypes } from '@nivo/core'\nimport { ordinalColorsPropType } from '@nivo/colors'\nimport { axisPropType } from '@nivo/axes'\nimport { LegendPropShape } from '@nivo/legends'\nimport PointTooltip from './PointTooltip'\nimport SliceTooltip from './SliceTooltip'\n\nconst commonPropTypes = {\n    data: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n            data: PropTypes.arrayOf(\n                PropTypes.shape({\n                    x: PropTypes.oneOfType([\n                        PropTypes.number,\n                        PropTypes.string,\n                        PropTypes.instanceOf(Date),\n                    ]),\n                    y: PropTypes.oneOfType([\n                        PropTypes.number,\n                        PropTypes.string,\n                        PropTypes.instanceOf(Date),\n                    ]),\n                })\n            ).isRequired,\n        })\n    ).isRequired,\n\n    xScale: PropTypes.object.isRequired,\n    xFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    yScale: PropTypes.object.isRequired,\n    yFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n\n    layers: PropTypes.arrayOf(\n        PropTypes.oneOfType([\n            PropTypes.oneOf([\n                'grid',\n                'markers',\n                'axes',\n                'areas',\n                'crosshair',\n                'lines',\n                'slices',\n                'points',\n                'mesh',\n                'legends',\n            ]),\n            PropTypes.func,\n        ])\n    ).isRequired,\n\n    curve: lineCurvePropType.isRequired,\n\n    axisTop: axisPropType,\n    axisRight: axisPropType,\n    axisBottom: axisPropType,\n    axisLeft: axisPropType,\n\n    enableGridX: PropTypes.bool.isRequired,\n    enableGridY: PropTypes.bool.isRequired,\n    gridXValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n    ]),\n    gridYValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n    ]),\n\n    enablePoints: PropTypes.bool.isRequired,\n    pointSymbol: PropTypes.func,\n    pointSize: PropTypes.number.isRequired,\n    pointColor: PropTypes.any.isRequired,\n    pointBorderWidth: PropTypes.number.isRequired,\n    pointBorderColor: PropTypes.any.isRequired,\n    enablePointLabel: PropTypes.bool.isRequired,\n    pointLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n\n    markers: PropTypes.arrayOf(\n        PropTypes.shape({\n            axis: PropTypes.oneOf(['x', 'y']).isRequired,\n            value: PropTypes.oneOfType([\n                PropTypes.number,\n                PropTypes.string,\n                PropTypes.instanceOf(Date),\n            ]).isRequired,\n            style: PropTypes.object,\n        })\n    ),\n\n    colors: ordinalColorsPropType.isRequired,\n\n    enableArea: PropTypes.bool.isRequired,\n    areaOpacity: PropTypes.number.isRequired,\n    areaBlendMode: blendModePropType.isRequired,\n    areaBaselineValue: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string,\n        PropTypes.instanceOf(Date),\n    ]).isRequired,\n    lineWidth: PropTypes.number.isRequired,\n\n    legends: PropTypes.arrayOf(PropTypes.shape(LegendPropShape)).isRequired,\n\n    isInteractive: PropTypes.bool.isRequired,\n    debugMesh: PropTypes.bool.isRequired,\n\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n\n    enableSlices: PropTypes.oneOf(['x', 'y', false]).isRequired,\n    debugSlices: PropTypes.bool.isRequired,\n    sliceTooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n\n    enableCrosshair: PropTypes.bool.isRequired,\n    crosshairType: PropTypes.string.isRequired,\n}\n\nexport const LinePropTypes = {\n    ...commonPropTypes,\n    enablePointLabel: PropTypes.bool.isRequired,\n    role: PropTypes.string.isRequired,\n    useMesh: PropTypes.bool.isRequired,\n    ...motionPropTypes,\n    ...defsPropTypes,\n}\n\nexport const LineCanvasPropTypes = {\n    pixelRatio: PropTypes.number.isRequired,\n    ...commonPropTypes,\n}\n\nconst commonDefaultProps = {\n    curve: 'linear',\n\n    xScale: {\n        type: 'point',\n    },\n    yScale: {\n        type: 'linear',\n        min: 0,\n        max: 'auto',\n    },\n\n    layers: [\n        'grid',\n        'markers',\n        'axes',\n        'areas',\n        'crosshair',\n        'lines',\n        'points',\n        'slices',\n        'mesh',\n        'legends',\n    ],\n    axisBottom: {},\n    axisLeft: {},\n    enableGridX: true,\n    enableGridY: true,\n\n    enablePoints: true,\n    pointSize: 6,\n    pointColor: { from: 'color' },\n    pointBorderWidth: 0,\n    pointBorderColor: { theme: 'background' },\n    enablePointLabel: false,\n    pointLabel: 'yFormatted',\n\n    colors: { scheme: 'nivo' },\n    enableArea: false,\n    areaBaselineValue: 0,\n    areaOpacity: 0.2,\n    areaBlendMode: 'normal',\n    lineWidth: 2,\n\n    legends: [],\n\n    isInteractive: true,\n    tooltip: PointTooltip,\n    enableSlices: false,\n    debugSlices: false,\n    sliceTooltip: SliceTooltip,\n    debugMesh: false,\n    enableCrosshair: true,\n    crosshairType: 'bottom-left',\n}\n\nexport const LineDefaultProps = {\n    ...commonDefaultProps,\n    enablePointLabel: false,\n    useMesh: false,\n    animate: true,\n    motionConfig: 'gentle',\n    defs: [],\n    fill: [],\n    role: 'img',\n}\n\nexport const LineCanvasDefaultProps = {\n    ...commonDefaultProps,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { useCallback, useMemo, useState } from 'react'\nimport { area, line } from 'd3-shape'\nimport { curveFromProp, useTheme, useValueFormatter } from '@nivo/core'\nimport { useOrdinalColorScale, useInheritedColor } from '@nivo/colors'\nimport { computeXYScalesForSeries } from '@nivo/scales'\nimport { LineDefaultProps } from './props'\n\nexport const useLineGenerator = ({ curve }) => {\n    return useMemo(\n        () =>\n            line()\n                .defined(d => d.x !== null && d.y !== null)\n                .x(d => d.x)\n                .y(d => d.y)\n                .curve(curveFromProp(curve)),\n        [curve]\n    )\n}\n\nexport const useAreaGenerator = ({ curve, yScale, areaBaselineValue }) => {\n    return useMemo(() => {\n        return area()\n            .defined(d => d.x !== null && d.y !== null)\n            .x(d => d.x)\n            .y1(d => d.y)\n            .y0(d => d.y0)\n            .curve(curveFromProp(curve))\n    }, [curve, yScale, areaBaselineValue])\n}\nconst usePoints = ({ series, getPointColor, getPointBorderColor, formatX, formatY }) => {\n    return useMemo(() => {\n        return series.reduce((acc, serie) => {\n            return [\n                ...acc,\n                ...serie.data\n                    .filter(datum => datum.position.x !== null && datum.position.y !== null)\n                    .map((datum, i) => {\n                        const point = {\n                            id: `${serie.id}.${i}`,\n                            index: acc.length + i,\n                            serieId: serie.id,\n                            serieColor: serie.color,\n                            x: datum.position.x,\n                            y: datum.position.y,\n                        }\n                        point.color = getPointColor(serie)\n                        point.borderColor = getPointBorderColor(point)\n                        point.data = {\n                            ...datum.data,\n                            xFormatted: formatX(datum.data.x),\n                            yFormatted: formatY(datum.data.y),\n                        }\n\n                        return point\n                    }),\n            ]\n        }, [])\n    }, [series, getPointColor, getPointBorderColor, formatX, formatY])\n}\n\nexport const useSlices = ({ enableSlices, points, width, height }) => {\n    return useMemo(() => {\n        if (enableSlices === false) return []\n\n        if (enableSlices === 'x') {\n            const map = new Map()\n            points.forEach(point => {\n                if (point.data.x === null || point.data.y === null) return\n                if (!map.has(point.x)) map.set(point.x, [point])\n                else map.get(point.x).push(point)\n            })\n            return Array.from(map.entries())\n                .sort((a, b) => a[0] - b[0])\n                .map(([x, slicePoints], i, slices) => {\n                    const prevSlice = slices[i - 1]\n                    const nextSlice = slices[i + 1]\n\n                    let x0\n                    if (!prevSlice) x0 = x\n                    else x0 = x - (x - prevSlice[0]) / 2\n\n                    let sliceWidth\n                    if (!nextSlice) sliceWidth = width - x0\n                    else sliceWidth = x - x0 + (nextSlice[0] - x) / 2\n\n                    return {\n                        id: x,\n                        x0,\n                        x,\n                        y0: 0,\n                        y: 0,\n                        width: sliceWidth,\n                        height,\n                        points: slicePoints.reverse(),\n                    }\n                })\n        } else if (enableSlices === 'y') {\n            const map = new Map()\n            points.forEach(point => {\n                if (point.data.x === null || point.data.y === null) return\n                if (!map.has(point.y)) map.set(point.y, [point])\n                else map.get(point.y).push(point)\n            })\n            return Array.from(map.entries())\n                .sort((a, b) => a[0] - b[0])\n                .map(([y, slicePoints], i, slices) => {\n                    const prevSlice = slices[i - 1]\n                    const nextSlice = slices[i + 1]\n\n                    let y0\n                    if (!prevSlice) y0 = y\n                    else y0 = y - (y - prevSlice[0]) / 2\n\n                    let sliceHeight\n                    if (!nextSlice) sliceHeight = height - y0\n                    else sliceHeight = y - y0 + (nextSlice[0] - y) / 2\n\n                    return {\n                        id: y,\n                        x0: 0,\n                        x: 0,\n                        y0,\n                        y,\n                        width,\n                        height: sliceHeight,\n                        points: slicePoints.reverse(),\n                    }\n                })\n        }\n    }, [enableSlices, points])\n}\n\nexport const useLine = ({\n    data,\n    xScale: xScaleSpec = LineDefaultProps.xScale,\n    xFormat,\n    yScale: yScaleSpec = LineDefaultProps.yScale,\n    yFormat,\n    width,\n    height,\n    colors = LineDefaultProps.colors,\n    curve = LineDefaultProps.curve,\n    areaBaselineValue = LineDefaultProps.areaBaselineValue,\n    pointColor = LineDefaultProps.pointColor,\n    pointBorderColor = LineDefaultProps.pointBorderColor,\n    enableSlices = LineDefaultProps.enableSlicesTooltip,\n    enableAreaBetween = false,\n}) => {\n    const formatX = useValueFormatter(xFormat)\n    const formatY = useValueFormatter(yFormat)\n    const getColor = useOrdinalColorScale(colors, 'id')\n    const theme = useTheme()\n    const getPointColor = useInheritedColor(pointColor, theme)\n    const getPointBorderColor = useInheritedColor(pointBorderColor, theme)\n    const [hiddenIds, setHiddenIds] = useState([])\n\n    const {\n        xScale,\n        yScale,\n        series: rawSeries,\n    } = useMemo(\n        () =>\n            computeXYScalesForSeries(\n                data.filter(item => hiddenIds.indexOf(item.id) === -1),\n                xScaleSpec,\n                yScaleSpec,\n                width,\n                height\n            ),\n        [data, hiddenIds, xScaleSpec, yScaleSpec, width, height]\n    )\n    const { legendData, series } = useMemo(() => {\n        const dataWithColor = data.map(line => ({\n            id: line.id,\n            label: line.id,\n            color: getColor(line),\n        }))\n        const series = dataWithColor\n            .map(datum => ({\n                ...rawSeries.find(serie => serie.id === datum.id),\n                color: datum.color,\n            }))\n            .filter(item => Boolean(item.id))\n        const legendData = dataWithColor\n            .map(item => ({ ...item, hidden: !series.find(serie => serie.id === item.id) }))\n            .reverse()\n\n        return { legendData, series }\n    }, [data, rawSeries, getColor])\n\n    const toggleSerie = useCallback(id => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const points = usePoints({\n        series,\n        getPointColor,\n        getPointBorderColor,\n        formatX,\n        formatY,\n    })\n\n    const slices = useSlices({\n        enableSlices,\n        points,\n        width,\n        height,\n    })\n\n    const lineGenerator = useLineGenerator({ curve })\n    const areaGenerator = useAreaGenerator({\n        curve,\n        yScale,\n        areaBaselineValue,\n    })\n\n    return {\n        legendData,\n        toggleSerie,\n        lineGenerator,\n        areaGenerator,\n        getColor,\n        series,\n        xScale,\n        yScale,\n        slices,\n        points,\n    }\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useAnimatedPath, useMotionConfig, blendModePropType } from '@nivo/core'\n\nconst AreaPath = ({ areaBlendMode, areaOpacity, color, fill, path }) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedPath = useAnimatedPath(path)\n    const animatedProps = useSpring({\n        color,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.path\n            d={animatedPath}\n            fill={fill ? fill : animatedProps.color}\n            fillOpacity={areaOpacity}\n            strokeWidth={0}\n            style={{\n                mixBlendMode: areaBlendMode,\n            }}\n        />\n    )\n}\n\nAreaPath.propTypes = {\n    areaBlendMode: blendModePropType.isRequired,\n    areaOpacity: PropTypes.number.isRequired,\n    color: PropTypes.string,\n    fill: PropTypes.string,\n    path: PropTypes.string.isRequired,\n}\n\nconst Areas = ({ areaGenerator, areaOpacity, areaBlendMode, lines }) => {\n    const computedLines = lines.slice(0).reverse()\n\n    return (\n        <g>\n            {computedLines.map(line => (\n                <AreaPath\n                    key={line.id}\n                    path={areaGenerator(line.data.map(d => d.position))}\n                    {...{ areaOpacity, areaBlendMode, ...line }}\n                />\n            ))}\n        </g>\n    )\n}\n\nAreas.propTypes = {\n    areaGenerator: PropTypes.func.isRequired,\n    areaOpacity: PropTypes.number.isRequired,\n    areaBlendMode: blendModePropType.isRequired,\n    lines: PropTypes.arrayOf(PropTypes.object).isRequired,\n}\n\nexport default memo(Areas)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo, useMemo } from 'react'\nimport PropTypes from 'prop-types'\nimport { animated } from '@react-spring/web'\nimport { useAnimatedPath } from '@nivo/core'\n\nconst LinesItem = ({ lineGenerator, points, color, thickness }) => {\n    const path = useMemo(() => lineGenerator(points), [lineGenerator, points])\n    const animatedPath = useAnimatedPath(path)\n\n    return <animated.path d={animatedPath} fill=\"none\" strokeWidth={thickness} stroke={color} />\n}\n\nLinesItem.propTypes = {\n    points: PropTypes.arrayOf(\n        PropTypes.shape({\n            x: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n            y: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        })\n    ),\n    lineGenerator: PropTypes.func.isRequired,\n    color: PropTypes.string.isRequired,\n    thickness: PropTypes.number.isRequired,\n}\n\nexport default memo(LinesItem)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport LinesItem from './LinesItem'\n\nconst Lines = ({ lines, lineGenerator, lineWidth }) => {\n    return lines\n        .slice(0)\n        .reverse()\n        .map(({ id, data, color }) => (\n            <LinesItem\n                key={id}\n                id={id}\n                points={data.map(d => d.position)}\n                lineGenerator={lineGenerator}\n                color={color}\n                thickness={lineWidth}\n            />\n        ))\n}\n\nLines.propTypes = {\n    lines: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n            color: PropTypes.string.isRequired,\n            data: PropTypes.arrayOf(\n                PropTypes.shape({\n                    data: PropTypes.shape({\n                        x: PropTypes.oneOfType([\n                            PropTypes.string,\n                            PropTypes.number,\n                            PropTypes.instanceOf(Date),\n                        ]),\n                        y: PropTypes.oneOfType([\n                            PropTypes.string,\n                            PropTypes.number,\n                            PropTypes.instanceOf(Date),\n                        ]),\n                    }).isRequired,\n                    position: PropTypes.shape({\n                        x: PropTypes.number,\n                        y: PropTypes.number,\n                    }).isRequired,\n                })\n            ).isRequired,\n        })\n    ).isRequired,\n    lineWidth: PropTypes.number.isRequired,\n    lineGenerator: PropTypes.func.isRequired,\n}\n\nexport default memo(Lines)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { createElement, memo, useCallback, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTooltip } from '@nivo/tooltip'\n\nconst SlicesItem = ({\n    slice,\n    axis,\n    debug,\n    tooltip,\n    isCurrent,\n    currentlyHovered,\n    setSliceId,\n    current,\n    setCurrent,\n    setCurrentlyHovered,\n    height,\n    onClick,\n}) => {\n    const { showTooltipFromEvent, showTooltipAt, hideTooltip } = useTooltip()\n\n    const showSynchTooltip = useCallback(() => {\n        if (isCurrent) {\n            showTooltipAt(createElement(tooltip, { slice, axis }), [slice.x, height / 2], 'top')\n        }\n    }, [slice, isCurrent, currentlyHovered, showTooltipAt, tooltip])\n\n    useEffect(() => {\n        if (current === null) {\n            hideTooltip()\n        }\n    }, [current, hideTooltip])\n\n    useEffect(() => {\n        showSynchTooltip()\n    }, [showSynchTooltip])\n\n    const handleMouseEnter = useCallback(\n        event => {\n            showTooltipAt(createElement(tooltip, { slice, axis }), [slice.x, height / 2], 'top')\n            setCurrentlyHovered(true)\n            setSliceId && setSliceId(slice.id)\n            setCurrent(slice)\n        },\n        [showTooltipFromEvent, tooltip, slice]\n    )\n\n    // const handleMouseMove = useCallback(\n    //     event => {\n    //         //showTooltipFromEvent(createElement(tooltip, { slice, axis }), event, 'right')\n    //         setPointIndex(slice.id)\n    //     },\n    //     [showTooltipFromEvent, tooltip, slice, setPointIndex]\n    // )\n\n    const handleMouseLeave = useCallback(() => {\n        hideTooltip()\n        setSliceId && setSliceId(null)\n        setCurrentlyHovered(false)\n        setCurrent(null)\n    }, [hideTooltip, setSliceId, setCurrentlyHovered])\n\n    const handleClick = useCallback(\n        event => {\n            onClick && onClick(slice, event)\n        },\n        [onClick]\n    )\n    return (\n        <rect\n            x={slice.x0}\n            y={slice.y0}\n            width={slice.width}\n            height={slice.height}\n            stroke=\"red\"\n            strokeWidth={debug ? 1 : 0}\n            strokeOpacity={0.75}\n            fill=\"red\"\n            fillOpacity={isCurrent && debug ? 0.35 : 0}\n            onMouseEnter={handleMouseEnter}\n            // onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n        />\n    )\n}\n\nSlicesItem.propTypes = {\n    slice: PropTypes.object.isRequired,\n    axis: PropTypes.oneOf(['x', 'y']).isRequired,\n    debug: PropTypes.bool.isRequired,\n    height: PropTypes.number.isRequired,\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    isCurrent: PropTypes.bool.isRequired,\n    setCurrent: PropTypes.func.isRequired,\n    onMouseEnter: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onClick: PropTypes.func,\n}\n\nexport default memo(SlicesItem)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport SlicesItem from './SlicesItem'\n\nconst Slices = ({\n    slices,\n    axis,\n    debug,\n    height,\n    tooltip,\n    current,\n    setCurrent,\n    setSliceId,\n    setCurrentlyHovered,\n    currentlyHovered,\n    onClick,\n}) => {\n    return slices.map(slice => (\n        <SlicesItem\n            key={slice.id}\n            slice={slice}\n            axis={axis}\n            debug={debug}\n            height={height}\n            tooltip={tooltip}\n            setCurrent={setCurrent}\n            isCurrent={current !== null && current.id === slice.id}\n            setSliceId={setSliceId}\n            currentlyHovered={currentlyHovered}\n            setCurrentlyHovered={setCurrentlyHovered}\n            current={current}\n            onClick={onClick}\n        />\n    ))\n}\n\nSlices.propTypes = {\n    slices: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.oneOfType([\n                PropTypes.number,\n                PropTypes.string,\n                PropTypes.instanceOf(Date),\n            ]).isRequired,\n            x: PropTypes.number.isRequired,\n            y: PropTypes.number.isRequired,\n            points: PropTypes.arrayOf(PropTypes.object).isRequired,\n        })\n    ).isRequired,\n    axis: PropTypes.oneOf(['x', 'y']).isRequired,\n    debug: PropTypes.bool.isRequired,\n    height: PropTypes.number.isRequired,\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n    current: PropTypes.object,\n    setCurrent: PropTypes.func.isRequired,\n    onMouseEnter: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onClick: PropTypes.func,\n}\n\nexport default memo(Slices)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { getLabelGenerator, DotsItem, useTheme } from '@nivo/core'\n\nconst Points = ({ points, symbol, size, borderWidth, enableLabel, label, labelYOffset }) => {\n    const theme = useTheme()\n    const getLabel = getLabelGenerator(label)\n\n    /**\n     * We reverse the `points` array so that points from the lower lines in stacked lines\n     * graph are drawn on top. See https://github.com/plouc/nivo/issues/1051.\n     */\n    const mappedPoints = points\n        .slice(0)\n        .reverse()\n        .map(point => {\n            const mappedPoint = {\n                id: point.id,\n                x: point.x,\n                y: point.y,\n                datum: point.data,\n                fill: point.color,\n                stroke: point.borderColor,\n                label: enableLabel ? getLabel(point.data) : null,\n            }\n\n            return mappedPoint\n        })\n\n    return (\n        <g>\n            {mappedPoints.map(point => (\n                <DotsItem\n                    key={point.id}\n                    x={point.x}\n                    y={point.y}\n                    datum={point.datum}\n                    symbol={symbol}\n                    size={size}\n                    color={point.fill}\n                    borderWidth={borderWidth}\n                    borderColor={point.stroke}\n                    label={point.label}\n                    labelYOffset={labelYOffset}\n                    theme={theme}\n                />\n            ))}\n        </g>\n    )\n}\n\nPoints.propTypes = {\n    points: PropTypes.arrayOf(PropTypes.object),\n    symbol: PropTypes.func,\n    size: PropTypes.number.isRequired,\n    color: PropTypes.func.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    borderColor: PropTypes.func.isRequired,\n    enableLabel: PropTypes.bool.isRequired,\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    labelYOffset: PropTypes.number,\n}\n\nexport default memo(Points)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { createElement, memo, useCallback, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTooltip } from '@nivo/tooltip'\nimport { Mesh as BaseMesh } from '@nivo/voronoi'\n\nconst Mesh = ({\n    points,\n    width,\n    height,\n    margin,\n    setCurrent,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    debug,\n}) => {\n    const { showTooltipAt, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        (point, event) => {\n            showTooltipAt(\n                createElement(tooltip, { point }),\n                [point.x + margin.left, point.y + margin.top],\n                'top'\n            )\n            setCurrent(point)\n            onMouseEnter && onMouseEnter(point, event)\n        },\n        [setCurrent, showTooltipAt, tooltip, onMouseEnter, margin]\n    )\n\n    const handleMouseMove = useCallback(\n        (point, event) => {\n            showTooltipAt(\n                createElement(tooltip, { point }),\n                [point.x + margin.left, point.y + margin.top],\n                'top'\n            )\n            setCurrent(point)\n            onMouseMove && onMouseMove(point, event)\n        },\n        [setCurrent, showTooltipAt, tooltip, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (point, event) => {\n            hideTooltip()\n            setCurrent(null)\n            onMouseLeave && onMouseLeave(point, event)\n        },\n        [hideTooltip, setCurrent, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        (point, event) => {\n            onClick && onClick(point, event)\n        },\n        [onClick]\n    )\n\n    return (\n        <BaseMesh\n            nodes={points}\n            width={width}\n            height={height}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n            debug={debug}\n        />\n    )\n}\n\nMesh.propTypes = {\n    points: PropTypes.arrayOf(PropTypes.object).isRequired,\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    margin: PropTypes.object.isRequired,\n    setCurrent: PropTypes.func.isRequired,\n    onMouseEnter: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onClick: PropTypes.func,\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n    debug: PropTypes.bool.isRequired,\n}\n\nexport default memo(Mesh)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { Fragment, useState, useEffect } from 'react'\nimport {\n    bindDefs,\n    withContainer,\n    useDimensions,\n    useTheme,\n    SvgWrapper,\n    CartesianMarkers,\n} from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { Axes, Grid } from '@nivo/axes'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { Crosshair } from '@nivo/tooltip'\nimport { useLine } from './hooks'\nimport { LinePropTypes, LineDefaultProps } from './props'\nimport Areas from './Areas'\nimport Lines from './Lines'\nimport Slices from './Slices'\nimport Points from './Points'\nimport Mesh from './Mesh'\n\nconst Line = props => {\n    const {\n        data,\n        xScale: xScaleSpec,\n        xFormat,\n        yScale: yScaleSpec,\n        yFormat,\n        layers,\n        curve,\n        areaBaselineValue,\n\n        colors,\n\n        margin: partialMargin,\n        width,\n        height,\n\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        enableGridX,\n        enableGridY,\n        gridXValues,\n        gridYValues,\n\n        lineWidth,\n        enableArea,\n        enableAreaBetween,\n        areaOpacity,\n        areaBlendMode,\n\n        enablePoints,\n        pointSymbol,\n        pointSize,\n        pointColor,\n        pointBorderWidth,\n        pointBorderColor,\n        enablePointLabel,\n        pointLabel,\n        pointLabelYOffset,\n\n        defs,\n        fill,\n\n        markers,\n\n        legends,\n\n        isInteractive,\n\n        useMesh,\n        debugMesh,\n\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n\n        tooltip,\n        sliceId,\n        setSliceId,\n\n        enableSlices,\n        debugSlices,\n        sliceTooltip,\n\n        enableCrosshair,\n        crosshairType,\n\n        role,\n    } = props\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        legendData,\n        toggleSerie,\n        lineGenerator,\n        areaGenerator,\n        series,\n        xScale,\n        yScale,\n        slices,\n        points,\n    } = useLine({\n        data,\n        xScale: xScaleSpec,\n        xFormat,\n        yScale: yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        colors,\n        curve,\n        areaBaselineValue,\n        pointColor,\n        pointBorderColor,\n        enableSlices,\n        enableAreaBetween,\n    })\n\n    const theme = useTheme()\n    const getPointColor = useInheritedColor(pointColor, theme)\n    const getPointBorderColor = useInheritedColor(pointBorderColor, theme)\n\n    const [currentPoint, setCurrentPoint] = useState(null)\n    const [currentSlice, setCurrentSlice] = useState(null)\n\n    const [currentlyHovered, setCurrentlyHovered] = useState(false)\n    const [sliceByIndex, setSliceByIndex] = useState({})\n\n    useEffect(() => {\n        if (!slices) {\n            return\n        }\n\n        let sliceDict = {}\n        for (let i = 0; i < slices.length; i++) {\n            sliceDict[slices[i].id] = slices[i]\n        }\n        setSliceByIndex(sliceDict)\n    }, [data, slices])\n\n    useEffect(() => {\n        if (!currentlyHovered && setSliceId) {\n            setCurrentSlice(sliceByIndex[sliceId] || null)\n        }\n    }, [sliceId, sliceByIndex])\n\n    const layerById = {\n        grid: (\n            <Grid\n                key=\"grid\"\n                theme={theme}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        ),\n        markers: (\n            <CartesianMarkers\n                key=\"markers\"\n                markers={markers}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale}\n                yScale={yScale}\n                theme={theme}\n            />\n        ),\n        axes: (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                theme={theme}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        ),\n        areas: null,\n        lines: (\n            <Lines key=\"lines\" lines={series} lineGenerator={lineGenerator} lineWidth={lineWidth} />\n        ),\n        slices: null,\n        points: null,\n        crosshair: null,\n        mesh: null,\n        legends: legends.map((legend, i) => (\n            <BoxLegendSvg\n                key={`legend.${i}`}\n                {...legend}\n                containerWidth={innerWidth}\n                containerHeight={innerHeight}\n                data={legend.data || legendData}\n                theme={theme}\n                toggleSerie={legend.toggleSerie ? toggleSerie : undefined}\n            />\n        )),\n    }\n\n    const boundDefs = bindDefs(defs, series, fill)\n\n    if (enableArea) {\n        layerById.areas = (\n            <Areas\n                key=\"areas\"\n                areaGenerator={areaGenerator}\n                areaOpacity={areaOpacity}\n                areaBlendMode={areaBlendMode}\n                lines={series}\n            />\n        )\n    }\n\n    if (isInteractive && enableSlices !== false) {\n        layerById.slices = (\n            <Slices\n                key=\"slices\"\n                slices={slices}\n                axis={enableSlices}\n                debug={debugSlices}\n                height={innerHeight}\n                tooltip={sliceTooltip}\n                current={currentSlice}\n                setCurrent={setCurrentSlice}\n                setCurrentlyHovered={setCurrentlyHovered}\n                setSliceId={setSliceId}\n                currentlyHovered={currentlyHovered}\n                onClick={onClick}\n            />\n        )\n    }\n\n    if (enablePoints) {\n        layerById.points = (\n            <Points\n                key=\"points\"\n                points={points}\n                symbol={pointSymbol}\n                size={pointSize}\n                color={getPointColor}\n                borderWidth={pointBorderWidth}\n                borderColor={getPointBorderColor}\n                enableLabel={enablePointLabel}\n                label={pointLabel}\n                labelYOffset={pointLabelYOffset}\n            />\n        )\n    }\n\n    if (isInteractive && enableCrosshair) {\n        if (currentPoint !== null) {\n            layerById.crosshair = (\n                <Crosshair\n                    key=\"crosshair\"\n                    width={innerWidth}\n                    height={innerHeight}\n                    x={currentPoint.x}\n                    y={currentPoint.y}\n                    type={crosshairType}\n                />\n            )\n        }\n        if (currentSlice !== null) {\n            layerById.crosshair = (\n                <Crosshair\n                    key=\"crosshair\"\n                    width={innerWidth}\n                    height={innerHeight}\n                    x={currentSlice.x}\n                    y={currentSlice.y}\n                    type={enableSlices}\n                />\n            )\n        }\n    }\n    if (isInteractive && useMesh && enableSlices === false) {\n        layerById.mesh = (\n            <Mesh\n                key=\"mesh\"\n                points={points}\n                width={innerWidth}\n                height={innerHeight}\n                margin={margin}\n                current={currentPoint}\n                setCurrent={setCurrentPoint}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                tooltip={tooltip}\n                debug={debugMesh}\n            />\n        )\n    }\n\n    return (\n        <SvgWrapper\n            defs={boundDefs}\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return (\n                        <Fragment key={i}>\n                            {layer({\n                                ...props,\n                                innerWidth,\n                                innerHeight,\n                                series,\n                                slices,\n                                points,\n                                xScale,\n                                yScale,\n                                lineGenerator,\n                                areaGenerator,\n                                currentPoint,\n                                setCurrentPoint,\n                                currentSlice,\n                                setCurrentSlice,\n                            })}\n                        </Fragment>\n                    )\n                }\n\n                return layerById[layer]\n            })}\n        </SvgWrapper>\n    )\n}\n\nLine.propTypes = LinePropTypes\nLine.defaultProps = LineDefaultProps\n\nexport default withContainer(Line)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport Line from './Line'\n\nconst ResponsiveLine = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Line width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveLine\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { createElement, useRef, useEffect, useState, useCallback, forwardRef } from 'react'\nimport {\n    withContainer,\n    useDimensions,\n    useTheme,\n    getRelativeCursor,\n    isCursorInRect,\n} from '@nivo/core'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useVoronoiMesh, renderVoronoiToCanvas, renderVoronoiCellToCanvas } from '@nivo/voronoi'\nimport { LineCanvasPropTypes, LineCanvasDefaultProps } from './props'\nimport { useLine } from './hooks'\n\nconst LineCanvas = ({\n    width,\n    height,\n    margin: partialMargin,\n    pixelRatio,\n\n    data,\n    xScale: xScaleSpec,\n    xFormat,\n    yScale: yScaleSpec,\n    yFormat,\n    curve,\n\n    layers,\n\n    colors,\n    lineWidth,\n\n    enableArea,\n    areaBaselineValue,\n    areaOpacity,\n\n    enablePoints,\n    pointSize,\n    pointColor,\n    pointBorderWidth,\n    pointBorderColor,\n\n    enableGridX,\n    gridXValues,\n    enableGridY,\n    gridYValues,\n    axisTop,\n    axisRight,\n    axisBottom,\n    axisLeft,\n\n    legends,\n\n    isInteractive,\n    debugMesh,\n    //onMouseEnter,\n    //onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n\n    canvasRef,\n}) => {\n    const canvasEl = useRef(null)\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n    const theme = useTheme()\n    const [currentPoint, setCurrentPoint] = useState(null)\n\n    const { lineGenerator, areaGenerator, series, xScale, yScale, points } = useLine({\n        data,\n        xScale: xScaleSpec,\n        xFormat,\n        yScale: yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        colors,\n        curve,\n        areaBaselineValue,\n        pointColor,\n        pointBorderColor,\n    })\n\n    const { delaunay, voronoi } = useVoronoiMesh({\n        points,\n        width: innerWidth,\n        height: innerHeight,\n        debug: debugMesh,\n    })\n\n    useEffect(() => {\n        if (canvasRef) {\n            canvasRef.current = canvasEl.current\n        }\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (typeof layer === 'function') {\n                layer({\n                    ctx,\n                    innerWidth,\n                    innerHeight,\n                    series,\n                    points,\n                    xScale,\n                    yScale,\n                    lineWidth,\n                    lineGenerator,\n                    areaGenerator,\n                    currentPoint,\n                    setCurrentPoint,\n                })\n            }\n\n            if (layer === 'grid' && theme.grid.line.strokeWidth > 0) {\n                ctx.lineWidth = theme.grid.line.strokeWidth\n                ctx.strokeStyle = theme.grid.line.stroke\n\n                enableGridX &&\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: xScale,\n                        axis: 'x',\n                        values: gridXValues,\n                    })\n\n                enableGridY &&\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: yScale,\n                        axis: 'y',\n                        values: gridYValues,\n                    })\n            }\n\n            if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale,\n                    yScale,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            }\n\n            if (layer === 'areas' && enableArea === true) {\n                ctx.save()\n                ctx.globalAlpha = areaOpacity\n\n                areaGenerator.context(ctx)\n                series.forEach(serie => {\n                    ctx.fillStyle = serie.color\n                    ctx.beginPath()\n                    areaGenerator(serie.data.map(d => d.position))\n                    ctx.fill()\n                })\n\n                ctx.restore()\n            }\n\n            if (layer === 'lines') {\n                lineGenerator.context(ctx)\n                series.forEach(serie => {\n                    ctx.strokeStyle = serie.color\n                    ctx.lineWidth = lineWidth\n                    ctx.beginPath()\n                    lineGenerator(serie.data.map(d => d.position))\n                    ctx.stroke()\n                })\n            }\n\n            if (layer === 'points' && enablePoints === true && pointSize > 0) {\n                points.forEach(point => {\n                    ctx.fillStyle = point.color\n                    ctx.beginPath()\n                    ctx.arc(point.x, point.y, pointSize / 2, 0, 2 * Math.PI)\n                    ctx.fill()\n\n                    if (pointBorderWidth > 0) {\n                        ctx.strokeStyle = point.borderColor\n                        ctx.lineWidth = pointBorderWidth\n                        ctx.stroke()\n                    }\n                })\n            }\n\n            if (layer === 'mesh' && debugMesh === true) {\n                renderVoronoiToCanvas(ctx, voronoi)\n                if (currentPoint) {\n                    renderVoronoiCellToCanvas(ctx, voronoi, currentPoint.index)\n                }\n            }\n\n            if (layer === 'legends') {\n                const legendData = series\n                    .map(serie => ({\n                        id: serie.id,\n                        label: serie.id,\n                        color: serie.color,\n                    }))\n                    .reverse()\n\n                legends.forEach(legend => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data: legend.data || legendData,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            }\n        })\n    }, [\n        canvasEl,\n        outerWidth,\n        outerHeight,\n        layers,\n        theme,\n        lineGenerator,\n        series,\n        xScale,\n        yScale,\n        enableGridX,\n        gridXValues,\n        enableGridY,\n        gridYValues,\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        legends,\n        points,\n        enablePoints,\n        pointSize,\n        currentPoint,\n    ])\n\n    const getPointFromMouseEvent = useCallback(\n        event => {\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            if (!isCursorInRect(margin.left, margin.top, innerWidth, innerHeight, x, y)) return null\n\n            const pointIndex = delaunay.find(x - margin.left, y - margin.top)\n            return points[pointIndex]\n        },\n        [canvasEl, margin, innerWidth, innerHeight, delaunay]\n    )\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = useCallback(\n        event => {\n            const point = getPointFromMouseEvent(event)\n            setCurrentPoint(point)\n\n            if (point) {\n                showTooltipFromEvent(createElement(tooltip, { point }), event)\n            } else {\n                hideTooltip()\n            }\n        },\n        [getPointFromMouseEvent, setCurrentPoint, showTooltipFromEvent, hideTooltip, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        event => {\n            hideTooltip()\n            setCurrentPoint(null)\n            currentPoint && onMouseLeave && onMouseLeave(currentPoint, event)\n        },\n        [hideTooltip, setCurrentPoint, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        event => {\n            if (onClick) {\n                const point = getPointFromMouseEvent(event)\n                point && onClick(point, event)\n            }\n        },\n        [getPointFromMouseEvent, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nLineCanvas.propTypes = LineCanvasPropTypes\nLineCanvas.defaultProps = LineCanvasDefaultProps\n\nconst LineCanvasWithContainer = withContainer(LineCanvas)\n\nexport default forwardRef((props, ref) => <LineCanvasWithContainer {...props} canvasRef={ref} />)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { forwardRef } from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\nimport LineCanvas from './LineCanvas'\n\nconst ResponsiveLineCanvas = (props, ref) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <LineCanvas width={width} height={height} {...props} ref={ref} />}\n    </ResponsiveWrapper>\n)\n\nexport default forwardRef(ResponsiveLineCanvas)\n"],"names":["LinePointTooltip","_ref","point","_jsx","BasicTooltip","id","_jsxs","children","data","xFormatted","yFormatted","enableChip","color","serieColor","propTypes","PropTypes","object","isRequired","memo","SliceTooltip","slice","axis","theme","useTheme","otherAxis","TableTooltip","rows","points","map","Chip","style","tooltip","chip","serieId","tableCellValue","oneOf","commonPropTypes","arrayOf","shape","oneOfType","string","number","x","instanceOf","Date","y","xScale","xFormat","func","yScale","yFormat","layers","curve","lineCurvePropType","axisTop","axisPropType","axisRight","axisBottom","axisLeft","enableGridX","bool","enableGridY","gridXValues","gridYValues","enablePoints","pointSymbol","pointSize","pointColor","any","pointBorderWidth","pointBorderColor","enablePointLabel","pointLabel","markers","value","colors","ordinalColorsPropType","enableArea","areaOpacity","areaBlendMode","blendModePropType","areaBaselineValue","lineWidth","legends","LegendPropShape","isInteractive","debugMesh","enableSlices","debugSlices","sliceTooltip","enableCrosshair","crosshairType","LinePropTypes","_extends","role","useMesh","motionPropTypes","defsPropTypes","LineCanvasPropTypes","pixelRatio","commonDefaultProps","type","min","max","from","scheme","PointTooltip","LineDefaultProps","animate","motionConfig","defs","fill","LineCanvasDefaultProps","window","devicePixelRatio","useLineGenerator","useMemo","line","defined","d","curveFromProp","useAreaGenerator","_ref2","area","y1","y0","useSlices","_ref4","width","height","Map","forEach","has","get","push","set","Array","entries","sort","a","b","_ref5","i","slices","x0","slicePoints","prevSlice","nextSlice","reverse","_ref6","sliceHeight","useLine","_ref7","_ref7$xScale","xScaleSpec","_ref7$yScale","yScaleSpec","_ref7$colors","_ref7$curve","_ref7$areaBaselineVal","_ref7$pointColor","_ref7$pointBorderColo","_ref7$enableSlices","enableSlicesTooltip","enableAreaBetween","formatX","useValueFormatter","formatY","getColor","useOrdinalColorScale","getPointColor","useInheritedColor","getPointBorderColor","_useState","useState","hiddenIds","setHiddenIds","_useMemo","computeXYScalesForSeries","filter","item","indexOf","rawSeries","series","_useMemo2","dataWithColor","label","datum","find","serie","Boolean","legendData","hidden","toggleSerie","useCallback","state","concat","_ref3","reduce","acc","position","index","length","borderColor","usePoints","lineGenerator","areaGenerator","AreaPath","path","_useMotionConfig","useMotionConfig","springConfig","config","animatedPath","useAnimatedPath","animatedProps","useSpring","immediate","animated","fillOpacity","strokeWidth","mixBlendMode","Areas","computedLines","lines","LinesItem","thickness","stroke","Lines","SlicesItem","debug","isCurrent","currentlyHovered","setSliceId","current","setCurrent","setCurrentlyHovered","onClick","_useTooltip","useTooltip","showTooltipFromEvent","showTooltipAt","hideTooltip","showSynchTooltip","createElement","useEffect","handleMouseEnter","event","handleMouseLeave","handleClick","strokeOpacity","onMouseEnter","onMouseLeave","onMouseMove","Slices","Points","symbol","size","borderWidth","enableLabel","labelYOffset","getLabel","getLabelGenerator","mappedPoints","DotsItem","Mesh","margin","left","top","handleMouseMove","BaseMesh","nodes","Line","props","partialMargin","pointLabelYOffset","sliceId","_useDimensions","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","_useLine","currentPoint","setCurrentPoint","_useState2","currentSlice","setCurrentSlice","_useState3","_useState4","sliceByIndex","setSliceByIndex","sliceDict","layerById","grid","Grid","xValues","yValues","CartesianMarkers","axes","Axes","right","bottom","areas","crosshair","mesh","legend","BoxLegendSvg","containerWidth","containerHeight","undefined","boundDefs","bindDefs","Crosshair","SvgWrapper","layer","Fragment","defaultProps","withContainer","ResponsiveLine","ResponsiveWrapper","LineCanvas","canvasRef","canvasEl","useRef","_useVoronoiMesh","useVoronoiMesh","delaunay","voronoi","ctx","getContext","scale","fillStyle","background","fillRect","translate","strokeStyle","renderGridLinesToCanvas","values","renderAxesToCanvas","save","globalAlpha","context","beginPath","restore","arc","Math","PI","renderVoronoiToCanvas","renderVoronoiCellToCanvas","renderLegendToCanvas","getPointFromMouseEvent","_getRelativeCursor","getRelativeCursor","isCursorInRect","pointIndex","handleMouseHover","ref","cursor","LineCanvasWithContainer","LineCanvas$1","forwardRef"],"mappings":"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"}