{"version":3,"file":"nivo-line.cjs.js","sources":["../src/PointTooltip.js","../src/SliceTooltip.js","../src/props.js","../src/hooks.js","../src/Areas.js","../src/LinesItem.js","../src/Lines.js","../src/SlicesItem.js","../src/Slices.js","../src/Points.js","../src/Mesh.js","../src/Line.js","../src/LineCanvas.js","../src/ResponsiveLineCanvas.js","../src/ResponsiveLine.js"],"sourcesContent":["/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nconst LinePointTooltip = ({ point }) => {\n    return (\n        <BasicTooltip\n            id={\n                <span>\n                    x: <strong>{point.data.xFormatted}</strong>, y:{' '}\n                    <strong>{point.data.yFormatted}</strong>\n                </span>\n            }\n            enableChip={true}\n            color={point.serieColor}\n        />\n    )\n}\n\nLinePointTooltip.propTypes = {\n    point: PropTypes.object.isRequired,\n}\n\nexport default memo(LinePointTooltip)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTheme } from '@nivo/core'\nimport { Chip, TableTooltip } from '@nivo/tooltip'\n\nconst SliceTooltip = ({ slice, axis }) => {\n    const theme = useTheme()\n    const otherAxis = axis === 'x' ? 'y' : 'x'\n\n    return (\n        <TableTooltip\n            rows={slice.points.map(point => [\n                <Chip key=\"chip\" color={point.serieColor} style={theme.tooltip.chip} />,\n                point.serieId,\n                <span key=\"value\" style={theme.tooltip.tableCellValue}>\n                    {point.data[`${otherAxis}Formatted`]}\n                </span>,\n            ])}\n        />\n    )\n}\n\nSliceTooltip.propTypes = {\n    slice: PropTypes.object.isRequired,\n    axis: PropTypes.oneOf(['x', 'y']).isRequired,\n}\n\nexport default memo(SliceTooltip)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport PropTypes from 'prop-types'\nimport { lineCurvePropType, blendModePropType, motionPropTypes, defsPropTypes } from '@nivo/core'\nimport { ordinalColorsPropType } from '@nivo/colors'\nimport { axisPropType } from '@nivo/axes'\nimport { LegendPropShape } from '@nivo/legends'\nimport PointTooltip from './PointTooltip'\nimport SliceTooltip from './SliceTooltip'\n\nconst commonPropTypes = {\n    data: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n            data: PropTypes.arrayOf(\n                PropTypes.shape({\n                    x: PropTypes.oneOfType([\n                        PropTypes.number,\n                        PropTypes.string,\n                        PropTypes.instanceOf(Date),\n                    ]),\n                    y: PropTypes.oneOfType([\n                        PropTypes.number,\n                        PropTypes.string,\n                        PropTypes.instanceOf(Date),\n                    ]),\n                })\n            ).isRequired,\n        })\n    ).isRequired,\n\n    xScale: PropTypes.object.isRequired,\n    xFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    yScale: PropTypes.object.isRequired,\n    yFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n\n    layers: PropTypes.arrayOf(\n        PropTypes.oneOfType([\n            PropTypes.oneOf([\n                'grid',\n                'markers',\n                'axes',\n                'areas',\n                'crosshair',\n                'lines',\n                'slices',\n                'points',\n                'mesh',\n                'legends',\n            ]),\n            PropTypes.func,\n        ])\n    ).isRequired,\n\n    curve: lineCurvePropType.isRequired,\n\n    axisTop: axisPropType,\n    axisRight: axisPropType,\n    axisBottom: axisPropType,\n    axisLeft: axisPropType,\n\n    enableGridX: PropTypes.bool.isRequired,\n    enableGridY: PropTypes.bool.isRequired,\n    gridXValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n    ]),\n    gridYValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n    ]),\n\n    enablePoints: PropTypes.bool.isRequired,\n    pointSymbol: PropTypes.func,\n    pointSize: PropTypes.number.isRequired,\n    pointColor: PropTypes.any.isRequired,\n    pointBorderWidth: PropTypes.number.isRequired,\n    pointBorderColor: PropTypes.any.isRequired,\n    enablePointLabel: PropTypes.bool.isRequired,\n    pointLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n\n    markers: PropTypes.arrayOf(\n        PropTypes.shape({\n            axis: PropTypes.oneOf(['x', 'y']).isRequired,\n            value: PropTypes.oneOfType([\n                PropTypes.number,\n                PropTypes.string,\n                PropTypes.instanceOf(Date),\n            ]).isRequired,\n            style: PropTypes.object,\n        })\n    ),\n\n    colors: ordinalColorsPropType.isRequired,\n\n    enableArea: PropTypes.bool.isRequired,\n    areaOpacity: PropTypes.number.isRequired,\n    areaBlendMode: blendModePropType.isRequired,\n    areaBaselineValue: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string,\n        PropTypes.instanceOf(Date),\n    ]).isRequired,\n    lineWidth: PropTypes.number.isRequired,\n\n    legends: PropTypes.arrayOf(PropTypes.shape(LegendPropShape)).isRequired,\n\n    isInteractive: PropTypes.bool.isRequired,\n    debugMesh: PropTypes.bool.isRequired,\n\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n\n    enableSlices: PropTypes.oneOf(['x', 'y', false]).isRequired,\n    debugSlices: PropTypes.bool.isRequired,\n    sliceTooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n\n    enableCrosshair: PropTypes.bool.isRequired,\n    crosshairType: PropTypes.string.isRequired,\n}\n\nexport const LinePropTypes = {\n    ...commonPropTypes,\n    enablePointLabel: PropTypes.bool.isRequired,\n    role: PropTypes.string.isRequired,\n    useMesh: PropTypes.bool.isRequired,\n    ...motionPropTypes,\n    ...defsPropTypes,\n}\n\nexport const LineCanvasPropTypes = {\n    pixelRatio: PropTypes.number.isRequired,\n    ...commonPropTypes,\n}\n\nconst commonDefaultProps = {\n    curve: 'linear',\n\n    xScale: {\n        type: 'point',\n    },\n    yScale: {\n        type: 'linear',\n        min: 0,\n        max: 'auto',\n    },\n\n    layers: [\n        'grid',\n        'markers',\n        'axes',\n        'areas',\n        'crosshair',\n        'lines',\n        'points',\n        'slices',\n        'mesh',\n        'legends',\n    ],\n    axisBottom: {},\n    axisLeft: {},\n    enableGridX: true,\n    enableGridY: true,\n\n    enablePoints: true,\n    pointSize: 6,\n    pointColor: { from: 'color' },\n    pointBorderWidth: 0,\n    pointBorderColor: { theme: 'background' },\n    enablePointLabel: false,\n    pointLabel: 'yFormatted',\n\n    colors: { scheme: 'nivo' },\n    enableArea: false,\n    areaBaselineValue: 0,\n    areaOpacity: 0.2,\n    areaBlendMode: 'normal',\n    lineWidth: 2,\n\n    legends: [],\n\n    isInteractive: true,\n    tooltip: PointTooltip,\n    enableSlices: false,\n    debugSlices: false,\n    sliceTooltip: SliceTooltip,\n    debugMesh: false,\n    enableCrosshair: true,\n    crosshairType: 'bottom-left',\n}\n\nexport const LineDefaultProps = {\n    ...commonDefaultProps,\n    enablePointLabel: false,\n    useMesh: false,\n    animate: true,\n    motionConfig: 'gentle',\n    defs: [],\n    fill: [],\n    role: 'img',\n}\n\nexport const LineCanvasDefaultProps = {\n    ...commonDefaultProps,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { useCallback, useMemo, useState } from 'react'\nimport { area, line } from 'd3-shape'\nimport { curveFromProp, useTheme, useValueFormatter } from '@nivo/core'\nimport { useOrdinalColorScale, useInheritedColor } from '@nivo/colors'\nimport { computeXYScalesForSeries } from '@nivo/scales'\nimport { LineDefaultProps } from './props'\n\nexport const useLineGenerator = ({ curve }) => {\n    return useMemo(\n        () =>\n            line()\n                .defined(d => d.x !== null && d.y !== null)\n                .x(d => d.x)\n                .y(d => d.y)\n                .curve(curveFromProp(curve)),\n        [curve]\n    )\n}\n\nexport const useAreaGenerator = ({ curve, yScale, areaBaselineValue }) => {\n    return useMemo(() => {\n        return area()\n            .defined(d => d.x !== null && d.y !== null)\n            .x(d => d.x)\n            .y1(d => d.y)\n            .y0(d => d.y0)\n            .curve(curveFromProp(curve))\n    }, [curve, yScale, areaBaselineValue])\n}\nconst usePoints = ({ series, getPointColor, getPointBorderColor, formatX, formatY }) => {\n    return useMemo(() => {\n        return series.reduce((acc, serie) => {\n            return [\n                ...acc,\n                ...serie.data\n                    .filter(datum => datum.position.x !== null && datum.position.y !== null)\n                    .map((datum, i) => {\n                        const point = {\n                            id: `${serie.id}.${i}`,\n                            index: acc.length + i,\n                            serieId: serie.id,\n                            serieColor: serie.color,\n                            x: datum.position.x,\n                            y: datum.position.y,\n                        }\n                        point.color = getPointColor(serie)\n                        point.borderColor = getPointBorderColor(point)\n                        point.data = {\n                            ...datum.data,\n                            xFormatted: formatX(datum.data.x),\n                            yFormatted: formatY(datum.data.y),\n                        }\n\n                        return point\n                    }),\n            ]\n        }, [])\n    }, [series, getPointColor, getPointBorderColor, formatX, formatY])\n}\n\nexport const useSlices = ({ enableSlices, points, width, height }) => {\n    return useMemo(() => {\n        if (enableSlices === false) return []\n\n        if (enableSlices === 'x') {\n            const map = new Map()\n            points.forEach(point => {\n                if (point.data.x === null || point.data.y === null) return\n                if (!map.has(point.x)) map.set(point.x, [point])\n                else map.get(point.x).push(point)\n            })\n            return Array.from(map.entries())\n                .sort((a, b) => a[0] - b[0])\n                .map(([x, slicePoints], i, slices) => {\n                    const prevSlice = slices[i - 1]\n                    const nextSlice = slices[i + 1]\n\n                    let x0\n                    if (!prevSlice) x0 = x\n                    else x0 = x - (x - prevSlice[0]) / 2\n\n                    let sliceWidth\n                    if (!nextSlice) sliceWidth = width - x0\n                    else sliceWidth = x - x0 + (nextSlice[0] - x) / 2\n\n                    return {\n                        id: x,\n                        x0,\n                        x,\n                        y0: 0,\n                        y: 0,\n                        width: sliceWidth,\n                        height,\n                        points: slicePoints.reverse(),\n                    }\n                })\n        } else if (enableSlices === 'y') {\n            const map = new Map()\n            points.forEach(point => {\n                if (point.data.x === null || point.data.y === null) return\n                if (!map.has(point.y)) map.set(point.y, [point])\n                else map.get(point.y).push(point)\n            })\n            return Array.from(map.entries())\n                .sort((a, b) => a[0] - b[0])\n                .map(([y, slicePoints], i, slices) => {\n                    const prevSlice = slices[i - 1]\n                    const nextSlice = slices[i + 1]\n\n                    let y0\n                    if (!prevSlice) y0 = y\n                    else y0 = y - (y - prevSlice[0]) / 2\n\n                    let sliceHeight\n                    if (!nextSlice) sliceHeight = height - y0\n                    else sliceHeight = y - y0 + (nextSlice[0] - y) / 2\n\n                    return {\n                        id: y,\n                        x0: 0,\n                        x: 0,\n                        y0,\n                        y,\n                        width,\n                        height: sliceHeight,\n                        points: slicePoints.reverse(),\n                    }\n                })\n        }\n    }, [enableSlices, points])\n}\n\nexport const useLine = ({\n    data,\n    xScale: xScaleSpec = LineDefaultProps.xScale,\n    xFormat,\n    yScale: yScaleSpec = LineDefaultProps.yScale,\n    yFormat,\n    width,\n    height,\n    colors = LineDefaultProps.colors,\n    curve = LineDefaultProps.curve,\n    areaBaselineValue = LineDefaultProps.areaBaselineValue,\n    pointColor = LineDefaultProps.pointColor,\n    pointBorderColor = LineDefaultProps.pointBorderColor,\n    enableSlices = LineDefaultProps.enableSlicesTooltip,\n    enableAreaBetween = false,\n}) => {\n    const formatX = useValueFormatter(xFormat)\n    const formatY = useValueFormatter(yFormat)\n    const getColor = useOrdinalColorScale(colors, 'id')\n    const theme = useTheme()\n    const getPointColor = useInheritedColor(pointColor, theme)\n    const getPointBorderColor = useInheritedColor(pointBorderColor, theme)\n    const [hiddenIds, setHiddenIds] = useState([])\n\n    const {\n        xScale,\n        yScale,\n        series: rawSeries,\n    } = useMemo(\n        () =>\n            computeXYScalesForSeries(\n                data.filter(item => hiddenIds.indexOf(item.id) === -1),\n                xScaleSpec,\n                yScaleSpec,\n                width,\n                height\n            ),\n        [data, hiddenIds, xScaleSpec, yScaleSpec, width, height]\n    )\n    const { legendData, series } = useMemo(() => {\n        const dataWithColor = data.map(line => ({\n            id: line.id,\n            label: line.id,\n            color: getColor(line),\n        }))\n        const series = dataWithColor\n            .map(datum => ({\n                ...rawSeries.find(serie => serie.id === datum.id),\n                color: datum.color,\n            }))\n            .filter(item => Boolean(item.id))\n        const legendData = dataWithColor\n            .map(item => ({ ...item, hidden: !series.find(serie => serie.id === item.id) }))\n            .reverse()\n\n        return { legendData, series }\n    }, [data, rawSeries, getColor])\n\n    const toggleSerie = useCallback(id => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const points = usePoints({\n        series,\n        getPointColor,\n        getPointBorderColor,\n        formatX,\n        formatY,\n    })\n\n    const slices = useSlices({\n        enableSlices,\n        points,\n        width,\n        height,\n    })\n\n    const lineGenerator = useLineGenerator({ curve })\n    const areaGenerator = useAreaGenerator({\n        curve,\n        yScale,\n        areaBaselineValue,\n    })\n\n    return {\n        legendData,\n        toggleSerie,\n        lineGenerator,\n        areaGenerator,\n        getColor,\n        series,\n        xScale,\n        yScale,\n        slices,\n        points,\n    }\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useAnimatedPath, useMotionConfig, blendModePropType } from '@nivo/core'\n\nconst AreaPath = ({ areaBlendMode, areaOpacity, color, fill, path }) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedPath = useAnimatedPath(path)\n    const animatedProps = useSpring({\n        color,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.path\n            d={animatedPath}\n            fill={fill ? fill : animatedProps.color}\n            fillOpacity={areaOpacity}\n            strokeWidth={0}\n            style={{\n                mixBlendMode: areaBlendMode,\n            }}\n        />\n    )\n}\n\nAreaPath.propTypes = {\n    areaBlendMode: blendModePropType.isRequired,\n    areaOpacity: PropTypes.number.isRequired,\n    color: PropTypes.string,\n    fill: PropTypes.string,\n    path: PropTypes.string.isRequired,\n}\n\nconst Areas = ({ areaGenerator, areaOpacity, areaBlendMode, lines }) => {\n    const computedLines = lines.slice(0).reverse()\n\n    return (\n        <g>\n            {computedLines.map(line => (\n                <AreaPath\n                    key={line.id}\n                    path={areaGenerator(line.data.map(d => d.position))}\n                    {...{ areaOpacity, areaBlendMode, ...line }}\n                />\n            ))}\n        </g>\n    )\n}\n\nAreas.propTypes = {\n    areaGenerator: PropTypes.func.isRequired,\n    areaOpacity: PropTypes.number.isRequired,\n    areaBlendMode: blendModePropType.isRequired,\n    lines: PropTypes.arrayOf(PropTypes.object).isRequired,\n}\n\nexport default memo(Areas)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo, useMemo } from 'react'\nimport PropTypes from 'prop-types'\nimport { animated } from '@react-spring/web'\nimport { useAnimatedPath } from '@nivo/core'\n\nconst LinesItem = ({ lineGenerator, points, color, thickness }) => {\n    const path = useMemo(() => lineGenerator(points), [lineGenerator, points])\n    const animatedPath = useAnimatedPath(path)\n\n    return <animated.path d={animatedPath} fill=\"none\" strokeWidth={thickness} stroke={color} />\n}\n\nLinesItem.propTypes = {\n    points: PropTypes.arrayOf(\n        PropTypes.shape({\n            x: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n            y: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        })\n    ),\n    lineGenerator: PropTypes.func.isRequired,\n    color: PropTypes.string.isRequired,\n    thickness: PropTypes.number.isRequired,\n}\n\nexport default memo(LinesItem)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport LinesItem from './LinesItem'\n\nconst Lines = ({ lines, lineGenerator, lineWidth }) => {\n    return lines\n        .slice(0)\n        .reverse()\n        .map(({ id, data, color }) => (\n            <LinesItem\n                key={id}\n                id={id}\n                points={data.map(d => d.position)}\n                lineGenerator={lineGenerator}\n                color={color}\n                thickness={lineWidth}\n            />\n        ))\n}\n\nLines.propTypes = {\n    lines: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n            color: PropTypes.string.isRequired,\n            data: PropTypes.arrayOf(\n                PropTypes.shape({\n                    data: PropTypes.shape({\n                        x: PropTypes.oneOfType([\n                            PropTypes.string,\n                            PropTypes.number,\n                            PropTypes.instanceOf(Date),\n                        ]),\n                        y: PropTypes.oneOfType([\n                            PropTypes.string,\n                            PropTypes.number,\n                            PropTypes.instanceOf(Date),\n                        ]),\n                    }).isRequired,\n                    position: PropTypes.shape({\n                        x: PropTypes.number,\n                        y: PropTypes.number,\n                    }).isRequired,\n                })\n            ).isRequired,\n        })\n    ).isRequired,\n    lineWidth: PropTypes.number.isRequired,\n    lineGenerator: PropTypes.func.isRequired,\n}\n\nexport default memo(Lines)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { createElement, memo, useCallback, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTooltip } from '@nivo/tooltip'\n\nconst SlicesItem = ({\n    slice,\n    axis,\n    debug,\n    tooltip,\n    isCurrent,\n    currentlyHovered,\n    setSliceId,\n    current,\n    setCurrent,\n    setCurrentlyHovered,\n    height,\n    onClick,\n}) => {\n    const { showTooltipFromEvent, showTooltipAt, hideTooltip } = useTooltip()\n\n    const showSynchTooltip = useCallback(() => {\n        if (isCurrent) {\n            showTooltipAt(createElement(tooltip, { slice, axis }), [slice.x, height / 2], 'top')\n        }\n    }, [slice, isCurrent, currentlyHovered, showTooltipAt, tooltip])\n\n    useEffect(() => {\n        if (current === null) {\n            hideTooltip()\n        }\n    }, [current, hideTooltip])\n\n    useEffect(() => {\n        showSynchTooltip()\n    }, [showSynchTooltip])\n\n    const handleMouseEnter = useCallback(\n        event => {\n            showTooltipAt(createElement(tooltip, { slice, axis }), [slice.x, height / 2], 'top')\n            setCurrentlyHovered(true)\n            setSliceId && setSliceId(slice.id)\n            setCurrent(slice)\n            onMouseEnter && onMouseEnter(slice, event)\n        },\n        [showTooltipFromEvent, tooltip, slice, onMouseEnter]\n    )\n\n    // const handleMouseMove = useCallback(\n    //     event => {\n    //         //showTooltipFromEvent(createElement(tooltip, { slice, axis }), event, 'right')\n    //         setPointIndex(slice.id)\n    //     },\n    //     [showTooltipFromEvent, tooltip, slice, setPointIndex]\n    // )\n\n    const handleMouseLeave = useCallback(() => {\n        hideTooltip()\n        setSliceId && setSliceId(null)\n        setCurrentlyHovered(false)\n        setCurrent(null)\n    }, [hideTooltip, setSliceId, setCurrentlyHovered])\n\n    const handleClick = useCallback(\n        event => {\n            onClick && onClick(slice, event)\n        },\n        [onClick]\n    )\n    return (\n        <rect\n            x={slice.x0}\n            y={slice.y0}\n            width={slice.width}\n            height={slice.height}\n            stroke=\"red\"\n            strokeWidth={debug ? 1 : 0}\n            strokeOpacity={0.75}\n            fill=\"red\"\n            fillOpacity={isCurrent && debug ? 0.35 : 0}\n            onMouseEnter={handleMouseEnter}\n            // onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n        />\n    )\n}\n\nSlicesItem.propTypes = {\n    slice: PropTypes.object.isRequired,\n    axis: PropTypes.oneOf(['x', 'y']).isRequired,\n    debug: PropTypes.bool.isRequired,\n    height: PropTypes.number.isRequired,\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    isCurrent: PropTypes.bool.isRequired,\n    setCurrent: PropTypes.func.isRequired,\n    onMouseEnter: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onClick: PropTypes.func,\n}\n\nexport default memo(SlicesItem)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport SlicesItem from './SlicesItem'\n\nconst Slices = ({\n    slices,\n    axis,\n    debug,\n    height,\n    tooltip,\n    current,\n    setCurrent,\n    setSliceId,\n    setCurrentlyHovered,\n    currentlyHovered,\n    onClick,\n}) => {\n    return slices.map(slice => (\n        <SlicesItem\n            key={slice.id}\n            slice={slice}\n            axis={axis}\n            debug={debug}\n            height={height}\n            tooltip={tooltip}\n            setCurrent={setCurrent}\n            isCurrent={current !== null && current.id === slice.id}\n            setSliceId={setSliceId}\n            currentlyHovered={currentlyHovered}\n            setCurrentlyHovered={setCurrentlyHovered}\n            current={current}\n            onClick={onClick}\n        />\n    ))\n}\n\nSlices.propTypes = {\n    slices: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.oneOfType([\n                PropTypes.number,\n                PropTypes.string,\n                PropTypes.instanceOf(Date),\n            ]).isRequired,\n            x: PropTypes.number.isRequired,\n            y: PropTypes.number.isRequired,\n            points: PropTypes.arrayOf(PropTypes.object).isRequired,\n        })\n    ).isRequired,\n    axis: PropTypes.oneOf(['x', 'y']).isRequired,\n    debug: PropTypes.bool.isRequired,\n    height: PropTypes.number.isRequired,\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n    current: PropTypes.object,\n    setCurrent: PropTypes.func.isRequired,\n    onMouseEnter: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onClick: PropTypes.func,\n}\n\nexport default memo(Slices)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { getLabelGenerator, DotsItem, useTheme } from '@nivo/core'\n\nconst Points = ({ points, symbol, size, borderWidth, enableLabel, label, labelYOffset }) => {\n    const theme = useTheme()\n    const getLabel = getLabelGenerator(label)\n\n    /**\n     * We reverse the `points` array so that points from the lower lines in stacked lines\n     * graph are drawn on top. See https://github.com/plouc/nivo/issues/1051.\n     */\n    const mappedPoints = points\n        .slice(0)\n        .reverse()\n        .map(point => {\n            const mappedPoint = {\n                id: point.id,\n                x: point.x,\n                y: point.y,\n                datum: point.data,\n                fill: point.color,\n                stroke: point.borderColor,\n                label: enableLabel ? getLabel(point.data) : null,\n            }\n\n            return mappedPoint\n        })\n\n    return (\n        <g>\n            {mappedPoints.map(point => (\n                <DotsItem\n                    key={point.id}\n                    x={point.x}\n                    y={point.y}\n                    datum={point.datum}\n                    symbol={symbol}\n                    size={size}\n                    color={point.fill}\n                    borderWidth={borderWidth}\n                    borderColor={point.stroke}\n                    label={point.label}\n                    labelYOffset={labelYOffset}\n                    theme={theme}\n                />\n            ))}\n        </g>\n    )\n}\n\nPoints.propTypes = {\n    points: PropTypes.arrayOf(PropTypes.object),\n    symbol: PropTypes.func,\n    size: PropTypes.number.isRequired,\n    color: PropTypes.func.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    borderColor: PropTypes.func.isRequired,\n    enableLabel: PropTypes.bool.isRequired,\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    labelYOffset: PropTypes.number,\n}\n\nexport default memo(Points)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { createElement, memo, useCallback, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTooltip } from '@nivo/tooltip'\nimport { Mesh as BaseMesh } from '@nivo/voronoi'\n\nconst Mesh = ({\n    points,\n    width,\n    height,\n    margin,\n    setCurrent,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    debug,\n}) => {\n    const { showTooltipAt, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        (point, event) => {\n            showTooltipAt(\n                createElement(tooltip, { point }),\n                [point.x + margin.left, point.y + margin.top],\n                'top'\n            )\n            setCurrent(point)\n            onMouseEnter && onMouseEnter(point, event)\n        },\n        [setCurrent, showTooltipAt, tooltip, onMouseEnter, margin]\n    )\n\n    const handleMouseMove = useCallback(\n        (point, event) => {\n            showTooltipAt(\n                createElement(tooltip, { point }),\n                [point.x + margin.left, point.y + margin.top],\n                'top'\n            )\n            setCurrent(point)\n            onMouseMove && onMouseMove(point, event)\n        },\n        [setCurrent, showTooltipAt, tooltip, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (point, event) => {\n            hideTooltip()\n            setCurrent(null)\n            onMouseLeave && onMouseLeave(point, event)\n        },\n        [hideTooltip, setCurrent, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        (point, event) => {\n            onClick && onClick(point, event)\n        },\n        [onClick]\n    )\n\n    return (\n        <BaseMesh\n            nodes={points}\n            width={width}\n            height={height}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n            debug={debug}\n        />\n    )\n}\n\nMesh.propTypes = {\n    points: PropTypes.arrayOf(PropTypes.object).isRequired,\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    margin: PropTypes.object.isRequired,\n    setCurrent: PropTypes.func.isRequired,\n    onMouseEnter: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onClick: PropTypes.func,\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n    debug: PropTypes.bool.isRequired,\n}\n\nexport default memo(Mesh)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { Fragment, useState, useEffect } from 'react'\nimport {\n    bindDefs,\n    withContainer,\n    useDimensions,\n    useTheme,\n    SvgWrapper,\n    CartesianMarkers,\n} from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { Axes, Grid } from '@nivo/axes'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { Crosshair } from '@nivo/tooltip'\nimport { useLine } from './hooks'\nimport { LinePropTypes, LineDefaultProps } from './props'\nimport Areas from './Areas'\nimport Lines from './Lines'\nimport Slices from './Slices'\nimport Points from './Points'\nimport Mesh from './Mesh'\n\nconst Line = props => {\n    const {\n        data,\n        xScale: xScaleSpec,\n        xFormat,\n        yScale: yScaleSpec,\n        yFormat,\n        layers,\n        curve,\n        areaBaselineValue,\n\n        colors,\n\n        margin: partialMargin,\n        width,\n        height,\n\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        enableGridX,\n        enableGridY,\n        gridXValues,\n        gridYValues,\n\n        lineWidth,\n        enableArea,\n        enableAreaBetween,\n        areaOpacity,\n        areaBlendMode,\n\n        enablePoints,\n        pointSymbol,\n        pointSize,\n        pointColor,\n        pointBorderWidth,\n        pointBorderColor,\n        enablePointLabel,\n        pointLabel,\n        pointLabelYOffset,\n\n        defs,\n        fill,\n\n        markers,\n\n        legends,\n\n        isInteractive,\n\n        useMesh,\n        debugMesh,\n\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n\n        tooltip,\n        sliceId,\n        setSliceId,\n\n        enableSlices,\n        debugSlices,\n        sliceTooltip,\n\n        enableCrosshair,\n        crosshairType,\n\n        role,\n    } = props\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        legendData,\n        toggleSerie,\n        lineGenerator,\n        areaGenerator,\n        series,\n        xScale,\n        yScale,\n        slices,\n        points,\n    } = useLine({\n        data,\n        xScale: xScaleSpec,\n        xFormat,\n        yScale: yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        colors,\n        curve,\n        areaBaselineValue,\n        pointColor,\n        pointBorderColor,\n        enableSlices,\n        enableAreaBetween,\n    })\n\n    const theme = useTheme()\n    const getPointColor = useInheritedColor(pointColor, theme)\n    const getPointBorderColor = useInheritedColor(pointBorderColor, theme)\n\n    const [currentPoint, setCurrentPoint] = useState(null)\n    const [currentSlice, setCurrentSlice] = useState(null)\n\n    const [currentlyHovered, setCurrentlyHovered] = useState(false)\n    const [sliceByIndex, setSliceByIndex] = useState({})\n\n    useEffect(() => {\n        if (!slices) {\n            return\n        }\n\n        let sliceDict = {}\n        for (let i = 0; i < slices.length; i++) {\n            sliceDict[slices[i].id] = slices[i]\n        }\n        setSliceByIndex(sliceDict)\n    }, [data, slices])\n\n    useEffect(() => {\n        if (!currentlyHovered && setSliceId) {\n            setCurrentSlice(sliceByIndex[sliceId] || null)\n        }\n    }, [sliceId, sliceByIndex])\n\n    const layerById = {\n        grid: (\n            <Grid\n                key=\"grid\"\n                theme={theme}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        ),\n        markers: (\n            <CartesianMarkers\n                key=\"markers\"\n                markers={markers}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale}\n                yScale={yScale}\n                theme={theme}\n            />\n        ),\n        axes: (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                theme={theme}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        ),\n        areas: null,\n        lines: (\n            <Lines key=\"lines\" lines={series} lineGenerator={lineGenerator} lineWidth={lineWidth} />\n        ),\n        slices: null,\n        points: null,\n        crosshair: null,\n        mesh: null,\n        legends: legends.map((legend, i) => (\n            <BoxLegendSvg\n                key={`legend.${i}`}\n                {...legend}\n                containerWidth={innerWidth}\n                containerHeight={innerHeight}\n                data={legend.data || legendData}\n                theme={theme}\n                toggleSerie={legend.toggleSerie ? toggleSerie : undefined}\n            />\n        )),\n    }\n\n    const boundDefs = bindDefs(defs, series, fill)\n\n    if (enableArea) {\n        layerById.areas = (\n            <Areas\n                key=\"areas\"\n                areaGenerator={areaGenerator}\n                areaOpacity={areaOpacity}\n                areaBlendMode={areaBlendMode}\n                lines={series}\n            />\n        )\n    }\n\n    if (isInteractive && enableSlices !== false) {\n        layerById.slices = (\n            <Slices\n                key=\"slices\"\n                slices={slices}\n                axis={enableSlices}\n                debug={debugSlices}\n                height={innerHeight}\n                tooltip={sliceTooltip}\n                current={currentSlice}\n                setCurrent={setCurrentSlice}\n                setCurrentlyHovered={setCurrentlyHovered}\n                setSliceId={setSliceId}\n                currentlyHovered={currentlyHovered}\n                onClick={onClick}\n            />\n        )\n    }\n\n    if (enablePoints) {\n        layerById.points = (\n            <Points\n                key=\"points\"\n                points={points}\n                symbol={pointSymbol}\n                size={pointSize}\n                color={getPointColor}\n                borderWidth={pointBorderWidth}\n                borderColor={getPointBorderColor}\n                enableLabel={enablePointLabel}\n                label={pointLabel}\n                labelYOffset={pointLabelYOffset}\n            />\n        )\n    }\n\n    if (isInteractive && enableCrosshair) {\n        if (currentPoint !== null) {\n            layerById.crosshair = (\n                <Crosshair\n                    key=\"crosshair\"\n                    width={innerWidth}\n                    height={innerHeight}\n                    x={currentPoint.x}\n                    y={currentPoint.y}\n                    type={crosshairType}\n                />\n            )\n        }\n        if (currentSlice !== null) {\n            layerById.crosshair = (\n                <Crosshair\n                    key=\"crosshair\"\n                    width={innerWidth}\n                    height={innerHeight}\n                    x={currentSlice.x}\n                    y={currentSlice.y}\n                    type={enableSlices}\n                />\n            )\n        }\n    }\n    if (isInteractive && useMesh && enableSlices === false) {\n        layerById.mesh = (\n            <Mesh\n                key=\"mesh\"\n                points={points}\n                width={innerWidth}\n                height={innerHeight}\n                margin={margin}\n                current={currentPoint}\n                setCurrent={setCurrentPoint}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                tooltip={tooltip}\n                debug={debugMesh}\n            />\n        )\n    }\n\n    return (\n        <SvgWrapper\n            defs={boundDefs}\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return (\n                        <Fragment key={i}>\n                            {layer({\n                                ...props,\n                                innerWidth,\n                                innerHeight,\n                                series,\n                                slices,\n                                points,\n                                xScale,\n                                yScale,\n                                lineGenerator,\n                                areaGenerator,\n                                currentPoint,\n                                setCurrentPoint,\n                                currentSlice,\n                                setCurrentSlice,\n                            })}\n                        </Fragment>\n                    )\n                }\n\n                return layerById[layer]\n            })}\n        </SvgWrapper>\n    )\n}\n\nLine.propTypes = LinePropTypes\nLine.defaultProps = LineDefaultProps\n\nexport default withContainer(Line)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { createElement, useRef, useEffect, useState, useCallback, forwardRef } from 'react'\nimport {\n    withContainer,\n    useDimensions,\n    useTheme,\n    getRelativeCursor,\n    isCursorInRect,\n} from '@nivo/core'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useVoronoiMesh, renderVoronoiToCanvas, renderVoronoiCellToCanvas } from '@nivo/voronoi'\nimport { LineCanvasPropTypes, LineCanvasDefaultProps } from './props'\nimport { useLine } from './hooks'\n\nconst LineCanvas = ({\n    width,\n    height,\n    margin: partialMargin,\n    pixelRatio,\n\n    data,\n    xScale: xScaleSpec,\n    xFormat,\n    yScale: yScaleSpec,\n    yFormat,\n    curve,\n\n    layers,\n\n    colors,\n    lineWidth,\n\n    enableArea,\n    areaBaselineValue,\n    areaOpacity,\n\n    enablePoints,\n    pointSize,\n    pointColor,\n    pointBorderWidth,\n    pointBorderColor,\n\n    enableGridX,\n    gridXValues,\n    enableGridY,\n    gridYValues,\n    axisTop,\n    axisRight,\n    axisBottom,\n    axisLeft,\n\n    legends,\n\n    isInteractive,\n    debugMesh,\n    //onMouseEnter,\n    //onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n\n    canvasRef,\n}) => {\n    const canvasEl = useRef(null)\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n    const theme = useTheme()\n    const [currentPoint, setCurrentPoint] = useState(null)\n\n    const { lineGenerator, areaGenerator, series, xScale, yScale, points } = useLine({\n        data,\n        xScale: xScaleSpec,\n        xFormat,\n        yScale: yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        colors,\n        curve,\n        areaBaselineValue,\n        pointColor,\n        pointBorderColor,\n    })\n\n    const { delaunay, voronoi } = useVoronoiMesh({\n        points,\n        width: innerWidth,\n        height: innerHeight,\n        debug: debugMesh,\n    })\n\n    useEffect(() => {\n        if (canvasRef) {\n            canvasRef.current = canvasEl.current\n        }\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (typeof layer === 'function') {\n                layer({\n                    ctx,\n                    innerWidth,\n                    innerHeight,\n                    series,\n                    points,\n                    xScale,\n                    yScale,\n                    lineWidth,\n                    lineGenerator,\n                    areaGenerator,\n                    currentPoint,\n                    setCurrentPoint,\n                })\n            }\n\n            if (layer === 'grid' && theme.grid.line.strokeWidth > 0) {\n                ctx.lineWidth = theme.grid.line.strokeWidth\n                ctx.strokeStyle = theme.grid.line.stroke\n\n                enableGridX &&\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: xScale,\n                        axis: 'x',\n                        values: gridXValues,\n                    })\n\n                enableGridY &&\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: yScale,\n                        axis: 'y',\n                        values: gridYValues,\n                    })\n            }\n\n            if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale,\n                    yScale,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            }\n\n            if (layer === 'areas' && enableArea === true) {\n                ctx.save()\n                ctx.globalAlpha = areaOpacity\n\n                areaGenerator.context(ctx)\n                series.forEach(serie => {\n                    ctx.fillStyle = serie.color\n                    ctx.beginPath()\n                    areaGenerator(serie.data.map(d => d.position))\n                    ctx.fill()\n                })\n\n                ctx.restore()\n            }\n\n            if (layer === 'lines') {\n                lineGenerator.context(ctx)\n                series.forEach(serie => {\n                    ctx.strokeStyle = serie.color\n                    ctx.lineWidth = lineWidth\n                    ctx.beginPath()\n                    lineGenerator(serie.data.map(d => d.position))\n                    ctx.stroke()\n                })\n            }\n\n            if (layer === 'points' && enablePoints === true && pointSize > 0) {\n                points.forEach(point => {\n                    ctx.fillStyle = point.color\n                    ctx.beginPath()\n                    ctx.arc(point.x, point.y, pointSize / 2, 0, 2 * Math.PI)\n                    ctx.fill()\n\n                    if (pointBorderWidth > 0) {\n                        ctx.strokeStyle = point.borderColor\n                        ctx.lineWidth = pointBorderWidth\n                        ctx.stroke()\n                    }\n                })\n            }\n\n            if (layer === 'mesh' && debugMesh === true) {\n                renderVoronoiToCanvas(ctx, voronoi)\n                if (currentPoint) {\n                    renderVoronoiCellToCanvas(ctx, voronoi, currentPoint.index)\n                }\n            }\n\n            if (layer === 'legends') {\n                const legendData = series\n                    .map(serie => ({\n                        id: serie.id,\n                        label: serie.id,\n                        color: serie.color,\n                    }))\n                    .reverse()\n\n                legends.forEach(legend => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data: legend.data || legendData,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            }\n        })\n    }, [\n        canvasEl,\n        outerWidth,\n        outerHeight,\n        layers,\n        theme,\n        lineGenerator,\n        series,\n        xScale,\n        yScale,\n        enableGridX,\n        gridXValues,\n        enableGridY,\n        gridYValues,\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        legends,\n        points,\n        enablePoints,\n        pointSize,\n        currentPoint,\n    ])\n\n    const getPointFromMouseEvent = useCallback(\n        event => {\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            if (!isCursorInRect(margin.left, margin.top, innerWidth, innerHeight, x, y)) return null\n\n            const pointIndex = delaunay.find(x - margin.left, y - margin.top)\n            return points[pointIndex]\n        },\n        [canvasEl, margin, innerWidth, innerHeight, delaunay]\n    )\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = useCallback(\n        event => {\n            const point = getPointFromMouseEvent(event)\n            setCurrentPoint(point)\n\n            if (point) {\n                showTooltipFromEvent(createElement(tooltip, { point }), event)\n            } else {\n                hideTooltip()\n            }\n        },\n        [getPointFromMouseEvent, setCurrentPoint, showTooltipFromEvent, hideTooltip, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        event => {\n            hideTooltip()\n            setCurrentPoint(null)\n            currentPoint && onMouseLeave && onMouseLeave(currentPoint, event)\n        },\n        [hideTooltip, setCurrentPoint, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        event => {\n            if (onClick) {\n                const point = getPointFromMouseEvent(event)\n                point && onClick(point, event)\n            }\n        },\n        [getPointFromMouseEvent, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nLineCanvas.propTypes = LineCanvasPropTypes\nLineCanvas.defaultProps = LineCanvasDefaultProps\n\nconst LineCanvasWithContainer = withContainer(LineCanvas)\n\nexport default forwardRef((props, ref) => <LineCanvasWithContainer {...props} canvasRef={ref} />)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { forwardRef } from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\nimport LineCanvas from './LineCanvas'\n\nconst ResponsiveLineCanvas = (props, ref) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <LineCanvas width={width} height={height} {...props} ref={ref} />}\n    </ResponsiveWrapper>\n)\n\nexport default forwardRef(ResponsiveLineCanvas)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport Line from './Line'\n\nconst ResponsiveLine = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Line width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveLine\n"],"names":["LinePointTooltip","point","_jsx","BasicTooltip","id","_jsxs","data","xFormatted","yFormatted","enableChip","color","serieColor","propTypes","PropTypes","object","isRequired","memo","SliceTooltip","slice","axis","theme","useTheme","otherAxis","TableTooltip","rows","points","map","Chip","style","tooltip","chip","serieId","tableCellValue","oneOf","commonPropTypes","arrayOf","shape","oneOfType","string","number","x","instanceOf","Date","y","xScale","xFormat","func","yScale","yFormat","layers","curve","lineCurvePropType","axisTop","axisPropType","axisRight","axisBottom","axisLeft","enableGridX","bool","enableGridY","gridXValues","gridYValues","enablePoints","pointSymbol","pointSize","pointColor","any","pointBorderWidth","pointBorderColor","enablePointLabel","pointLabel","markers","value","colors","ordinalColorsPropType","enableArea","areaOpacity","areaBlendMode","blendModePropType","areaBaselineValue","lineWidth","legends","LegendPropShape","isInteractive","debugMesh","enableSlices","debugSlices","sliceTooltip","enableCrosshair","crosshairType","LinePropTypes","role","useMesh","motionPropTypes","defsPropTypes","LineCanvasPropTypes","pixelRatio","commonDefaultProps","type","min","max","from","scheme","PointTooltip","LineDefaultProps","animate","motionConfig","defs","fill","LineCanvasDefaultProps","window","devicePixelRatio","useLineGenerator","useMemo","line","defined","d","curveFromProp","useAreaGenerator","area","y1","y0","useSlices","width","height","Map","forEach","has","get","push","set","Array","entries","sort","a","b","i","slices","x0","slicePoints","prevSlice","nextSlice","reverse","sliceHeight","useLine","xScaleSpec","yScaleSpec","enableSlicesTooltip","enableAreaBetween","formatX","useValueFormatter","formatY","getColor","useOrdinalColorScale","getPointColor","useInheritedColor","getPointBorderColor","useState","hiddenIds","setHiddenIds","computeXYScalesForSeries","filter","item","indexOf","rawSeries","series","dataWithColor","label","datum","find","serie","Boolean","legendData","hidden","toggleSerie","useCallback","state","reduce","acc","position","index","length","borderColor","usePoints","lineGenerator","areaGenerator","AreaPath","path","useMotionConfig","springConfig","config","animatedPath","useAnimatedPath","animatedProps","useSpring","immediate","animated","fillOpacity","strokeWidth","mixBlendMode","Areas","computedLines","lines","LinesItem","thickness","stroke","Lines","SlicesItem","debug","isCurrent","currentlyHovered","setSliceId","current","setCurrent","setCurrentlyHovered","onClick","useTooltip","showTooltipFromEvent","showTooltipAt","hideTooltip","showSynchTooltip","createElement","useEffect","handleMouseEnter","event","onMouseEnter","handleMouseLeave","handleClick","strokeOpacity","onMouseLeave","onMouseMove","Slices","Points","symbol","size","borderWidth","enableLabel","labelYOffset","getLabel","getLabelGenerator","mappedPoints","DotsItem","Mesh","margin","left","top","handleMouseMove","BaseMesh","nodes","Line","props","partialMargin","pointLabelYOffset","sliceId","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","currentPoint","setCurrentPoint","currentSlice","setCurrentSlice","sliceByIndex","setSliceByIndex","sliceDict","layerById","grid","Grid","xValues","yValues","CartesianMarkers","axes","Axes","right","bottom","areas","crosshair","mesh","legend","BoxLegendSvg","containerWidth","containerHeight","undefined","boundDefs","bindDefs","Crosshair","SvgWrapper","layer","Fragment","defaultProps","withContainer","LineCanvas","canvasRef","canvasEl","useRef","useVoronoiMesh","delaunay","voronoi","ctx","getContext","scale","fillStyle","background","fillRect","translate","strokeStyle","renderGridLinesToCanvas","values","renderAxesToCanvas","save","globalAlpha","context","beginPath","restore","arc","Math","PI","renderVoronoiToCanvas","renderVoronoiCellToCanvas","renderLegendToCanvas","getPointFromMouseEvent","getRelativeCursor","isCursorInRect","pointIndex","handleMouseHover","ref","cursor","LineCanvasWithContainer","forwardRef","ResponsiveWrapper"],"mappings":"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"}